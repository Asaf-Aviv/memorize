{"version":3,"sources":["assets/sounds/menu.wav","assets/sounds/back.wav","assets/sounds/match.wav","assets/menu/menu.svg","assets/fruits sync /^/.*/.svg$","assets/fruits/apple.svg","assets/fruits/banana.svg","assets/fruits/cherries.svg","assets/fruits/grapes.svg","assets/fruits/lemon.svg","assets/fruits/pear.svg","assets/fruits/pineapple.svg","assets/fruits/raspberry.svg","assets/fruits/tomato.svg","assets/fruits/watermelon.svg","components/GameMenuButton/index.js","components/GameMenuButton/GameMenuButton.js","components/GameMenu/index.js","components/GameMenu/GameMenu.js","components/Tile/Tile.js","PropTypes/propTypes.js","components/GameUI/index.js","components/GameUI/GameUI.js","components/GameRecap/index.js","components/GameRecap/GameRecap.js","util/util.js","components/GameWrapper/index.js","components/GameWrapper/GameWrapper.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./apple.svg","./banana.svg","./cherries.svg","./grapes.svg","./lemon.svg","./pear.svg","./pineapple.svg","./raspberry.svg","./tomato.svg","./watermelon.svg","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","GameMenuButton","_ref","text","onClick","onMouseEnter","react_default","a","createElement","type","className","GameMenu","isPlaying","playGame","quitGame","_useState","useState","_useState2","slicedToArray","showMenu","toggleMenu","menuSound","useRef","playMenuSound","current","play","toggleMenuHandler","Fragment","alt","src","require","concat","target","classList","contains","ref","MenuSound","BackSound","components_GameMenuButton","Tile","PropTypes","shape","string","isRequired","name","completed","bool","fruit","choosable","chooseFruit","index","classes","data-fruit","GameUI","grid","fruits","score","scoreMultiplier","guesses","totalCombos","currentCombo","i","components_Tile_Tile","some","f","key","GameRecap","stats","playAgain","fruitsCopy","pickRandomFruit","randomFruitIndex","parseInt","Math","random","length","splice","createGrid","toConsumableArray","Array","uuid","GameWrapper","setGameState","_useState3","_useState4","setGrid","_useState5","_useState6","setFruits","_useState7","_useState8","setScore","_useState9","_useState10","setScoreMultiplier","_useState11","_useState12","showWinningScreen","setGameOver","_useState13","_useState14","setGuesses","_useState15","_useState16","isComboable","setIsComboable","_useState17","_useState18","setCurrentCombo","_useState19","_useState20","setTotalCombos","matchSound","checkGameOver","every","useEffect","chosenFruits","setTimeout","fruitName","objectSpread","components_GameMenu","components_GameUI","components_GameRecap","MatchSound","App","components_GameWrapper","Boolean","window","location","hostname","match","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43595493.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu.6952c106.wav\";","module.exports = __webpack_public_path__ + \"static/media/back.483fb361.wav\";","module.exports = __webpack_public_path__ + \"static/media/match.9a5e6ba6.wav\";","module.exports = __webpack_public_path__ + \"static/media/menu.de126af1.svg\";","var map = {\n\t\"./apple.svg\": 22,\n\t\"./banana.svg\": 23,\n\t\"./cherries.svg\": 24,\n\t\"./grapes.svg\": 25,\n\t\"./lemon.svg\": 26,\n\t\"./pear.svg\": 27,\n\t\"./pineapple.svg\": 28,\n\t\"./raspberry.svg\": 29,\n\t\"./tomato.svg\": 30,\n\t\"./watermelon.svg\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 21;","module.exports = __webpack_public_path__ + \"static/media/apple.96037b82.svg\";","module.exports = __webpack_public_path__ + \"static/media/banana.892b8f16.svg\";","module.exports = __webpack_public_path__ + \"static/media/cherries.6f7f637f.svg\";","module.exports = __webpack_public_path__ + \"static/media/grapes.11be6a40.svg\";","module.exports = __webpack_public_path__ + \"static/media/lemon.812f3c7a.svg\";","module.exports = __webpack_public_path__ + \"static/media/pear.0c89232e.svg\";","module.exports = __webpack_public_path__ + \"static/media/pineapple.c9276cc2.svg\";","module.exports = __webpack_public_path__ + \"static/media/raspberry.509d71bb.svg\";","module.exports = __webpack_public_path__ + \"static/media/tomato.ba199f9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/watermelon.4bb012a3.svg\";","import GameMenuButton from './GameMenuButton';\n\nexport default GameMenuButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GameMenuButton = ({ text, onClick, onMouseEnter }) => (\n  <button\n    type=\"button\"\n    className=\"game-menu__btn\"\n    onClick={onClick}\n    onMouseEnter={onMouseEnter}\n  >\n    {text}\n  </button>\n);\n\nGameMenuButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onMouseEnter: PropTypes.func.isRequired,\n};\n\nexport default GameMenuButton;\n","import GameMenu from './GameMenu';\n\nexport default GameMenu;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport GameMenuButton from '../GameMenuButton';\nimport MenuSound from '../../assets/sounds/menu.wav';\nimport BackSound from '../../assets/sounds/back.wav';\n\nimport './GameMenu.sass';\n\nconst Menu = ({ isPlaying, playGame, quitGame }) => {\n  const [showMenu, toggleMenu] = useState(false);\n  const menuSound = useRef();\n\n  const playMenuSound = () => {\n    menuSound.current.play();\n  };\n\n  const toggleMenuHandler = () => {\n    toggleMenu(!showMenu);\n  };\n\n  const handleMenuClick = (e) => {\n    if (e.target.classList.contains('game-menu__btn')) {\n      toggleMenu(!showMenu);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"game-menu__toggler\" onClick={toggleMenuHandler}>\n        <img className=\"game-menu__icon\" alt=\"menu icon\" src={require('../../assets/menu/menu.svg')} />\n      </div>\n      <div\n        className={`game-menu\n        ${showMenu ? 'game-menu--open' : ''}\n      `}\n        onClick={handleMenuClick}\n      >\n        <audio ref={menuSound} id=\"menu-sound\" src={MenuSound} />\n        <audio id=\"back-sound\" src={BackSound} />\n        <div className=\"game-menu__container\">\n          {isPlaying && (\n            <GameMenuButton\n              text=\"Resume\"\n              onClick={toggleMenuHandler}\n              onMouseEnter={playMenuSound}\n            />\n          )}\n          <GameMenuButton\n            text={isPlaying ? 'Restart Game' : 'Play'}\n            onClick={playGame}\n            onMouseEnter={playMenuSound}\n          />\n          <GameMenuButton\n            text=\"Close Menu\"\n            onClick={toggleMenuHandler}\n            onMouseEnter={playMenuSound}\n          />\n          <GameMenuButton\n            text=\"Quit\"\n            onClick={quitGame}\n            onMouseEnter={playMenuSound}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nMenu.propTypes = {\n  isPlaying: PropTypes.bool.isRequired,\n  playGame: PropTypes.func.isRequired,\n  quitGame: PropTypes.func.isRequired,\n};\n\nexport default Menu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tile = ({\n  fruit, choosable, completed, chooseFruit, index,\n}) => {\n  let classes = `tile slide-in-elliptic-right-fwd delay-${index}`;\n  if (completed) classes += ' completed';\n  if (!choosable) classes += ' choosen';\n\n  return (\n    <div\n      id={fruit.id}\n      className={classes}\n      data-fruit={fruit.name}\n      onClick={choosable && !completed ? () => chooseFruit(fruit) : null}\n    >\n      <figure className=\"fruit__figure\">\n        <img\n          className=\"fruit__img\"\n          alt={fruit.name}\n          src={require(`../../assets/fruits/${fruit.name}.svg`)}\n        />\n      </figure>\n    </div>\n  );\n};\n\nTile.propTypes = {\n  choosable: PropTypes.bool.isRequired,\n  completed: PropTypes.bool.isRequired,\n  chooseFruit: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  fruit: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Tile;\n","import PropTypes from 'prop-types';\n\nexport const FruitPropTypes = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n\nexport const z = '';\n","import GameUI from './GameUI';\n\nexport default GameUI;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FruitPropTypes } from '../../PropTypes/propTypes';\nimport Tile from '../Tile/Tile';\n\nimport './GameUI.sass';\n\nconst GameUI = ({\n  grid, fruits, chooseFruit, score, scoreMultiplier,\n  guesses, totalCombos, currentCombo,\n}) => (\n  <div className=\"game__container\">\n    <header className=\"game__header\">\n      <div className=\"scoreboard\">\n        <span className=\"scoreboard__item\">{`Score: ${score}`}</span>\n        <span className=\"scoreboard__item\">{`Score Multiplier: x${scoreMultiplier}`}</span>\n        <span className=\"scoreboard__item\">{`Guesses: ${guesses}`}</span>\n        <span className=\"scoreboard__item\">{`Combo: ${currentCombo}`}</span>\n        <span className=\"scoreboard__item\">{`Total Combos: ${totalCombos}`}</span>\n      </div>\n    </header>\n\n    <main className=\"grid-container\">\n      {grid.map((fruit, i) => (\n        <Tile\n          choosable={!fruits.some(f => f.id === fruit.id) && !fruit.completed}\n          completed={fruit.completed}\n          key={fruit.id}\n          fruit={fruit}\n          chooseFruit={chooseFruit}\n          index={i}\n        />\n      ))}\n    </main>\n  </div>\n);\n\nGameUI.propTypes = {\n  grid: PropTypes.arrayOf(FruitPropTypes).isRequired,\n  fruits: PropTypes.arrayOf(FruitPropTypes).isRequired,\n  chooseFruit: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  scoreMultiplier: PropTypes.number.isRequired,\n  guesses: PropTypes.number.isRequired,\n  currentCombo: PropTypes.number.isRequired,\n  totalCombos: PropTypes.number.isRequired,\n};\n\nexport default GameUI;\n","import GameRecap from './GameRecap';\n\nexport default GameRecap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './GameRecap.sass';\n\nconst GameRecap = ({ stats, playAgain }) => (\n  <div className=\"game-recap\">\n    <h3 className=\"game-recap__title\">You Won!</h3>\n    <span className=\"game-recap__field\">{`Score: ${stats.score}`}</span>\n    <span className=\"game-recap__field\">{`Guesses: ${stats.guesses}`}</span>\n    <span className=\"game-recap__field\">{`Total Combos: ${stats.totalCombos}`}</span>\n    <button type=\"button\" onClick={playAgain} className=\"game-recap__btn\">Play Again</button>\n  </div>\n);\n\nGameRecap.propTypes = {\n  stats: PropTypes.shape({\n    score: PropTypes.number.isRequired,\n    guesses: PropTypes.number.isRequired,\n    totalCombos: PropTypes.number.isRequired,\n  }).isRequired,\n  playAgain: PropTypes.func.isRequired,\n};\n\n\nexport default GameRecap;\n","import uuid from 'uuid/v1';\n\nconst fruits = [\n  'apple', 'apple',\n  'banana', 'banana',\n  'cherries', 'cherries',\n  'grapes', 'grapes',\n  'lemon', 'lemon',\n  'pear', 'pear',\n  'pineapple', 'pineapple',\n  'raspberry', 'raspberry',\n  'tomato', 'tomato',\n  'watermelon', 'watermelon',\n];\n\nlet fruitsCopy = null;\n\nconst pickRandomFruit = () => {\n  const randomFruitIndex = parseInt(Math.random() * fruitsCopy.length, 10);\n  const fruit = fruitsCopy.splice(randomFruitIndex, 1)[0];\n  return fruit;\n};\n\nconst resetFruitsGrid = () => {\n  fruitsCopy = [...fruits];\n};\n\nexport const createGrid = () => {\n  resetFruitsGrid();\n\n  return [...Array(20)].map(() => ({\n    name: pickRandomFruit(),\n    id: uuid(),\n    completed: false,\n  }));\n};\n\nexport const z = '';\n","import GameWrapper from './GameWrapper';\n\nexport default GameWrapper;\n","import React, { useState, useEffect, useRef } from 'react';\nimport GameMenu from '../GameMenu';\nimport GameUI from '../GameUI';\nimport GameRecap from '../GameRecap';\nimport { createGrid } from '../../util/util';\nimport MatchSound from '../../assets/sounds/match.wav';\n\nimport './GameWrapper.sass';\n\nconst GameWrapper = () => {\n  const [isPlaying, setGameState] = useState(false);\n  const [grid, setGrid] = useState([]);\n  const [fruits, setFruits] = useState([]);\n  const [score, setScore] = useState(0);\n  const [scoreMultiplier, setScoreMultiplier] = useState(1);\n  const [showWinningScreen, setGameOver] = useState(false);\n  const [guesses, setGuesses] = useState(0);\n  const [isComboable, setIsComboable] = useState(false);\n  const [currentCombo, setCurrentCombo] = useState(0);\n  const [totalCombos, setTotalCombos] = useState(0);\n\n  const matchSound = useRef();\n\n  const playMatchSound = () => {\n    matchSound.current.play();\n  };\n\n  const initAllStats = () => {\n    setGameState(false);\n    setGrid(createGrid());\n    setFruits([]);\n    setScore(0);\n    setScoreMultiplier(1);\n    setGameOver(false);\n    setGuesses(0);\n    setIsComboable(false);\n    setCurrentCombo(0);\n    setTotalCombos(0);\n  };\n\n  const recapStats = () => ({\n    score,\n    guesses,\n    totalCombos,\n  });\n\n  const playGame = () => {\n    initAllStats();\n    setGameState(true);\n  };\n\n  const quitGame = () => {\n    setGameState(false);\n  };\n\n  const isMatch = chosenFruits => (\n    chosenFruits[0].name === chosenFruits[1].name\n  );\n\n  const gameOver = () => {\n    setGameState(false);\n    setGameOver(true);\n  };\n\n  const checkGameOver = () => {\n    if (grid.every(({ completed }) => completed)) {\n      gameOver();\n    }\n  };\n\n  const updateGrid = fruitName => setGrid(grid.map(fruit => (\n    fruit.name === fruitName\n      ? { ...fruit, completed: true }\n      : fruit\n  )));\n\n  const chooseFruit = (fruit) => {\n    if (fruits.length === 2) return;\n    setFruits([...fruits, fruit]);\n  };\n\n  useEffect(() => {\n    if (fruits.length !== 2) return;\n\n    setGuesses(guesses + 1);\n\n    if (!isMatch(fruits)) {\n      setIsComboable(false);\n      setCurrentCombo(0);\n      if (scoreMultiplier > 1) {\n        setScoreMultiplier(scoreMultiplier - 0.25);\n      }\n      setTimeout(() => setFruits([]), 500);\n      return;\n    }\n\n    if (isComboable) {\n      setCurrentCombo(currentCombo + 1);\n      setTotalCombos(totalCombos + 1);\n    } else {\n      setIsComboable(true);\n    }\n\n    playMatchSound();\n    updateGrid(fruits[0].name);\n    setScore(score + 1000 * scoreMultiplier);\n    setScoreMultiplier(scoreMultiplier + 1);\n    setFruits([]);\n  }, [fruits]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      checkGameOver();\n    }\n  }, [grid]);\n\n  return (\n    <div className=\"game-wrapper\">\n      <GameMenu isPlaying={isPlaying} playGame={playGame} quitGame={quitGame} />\n      {isPlaying && (\n        <GameUI\n          grid={grid}\n          score={score}\n          fruits={fruits}\n          chooseFruit={chooseFruit}\n          scoreMultiplier={scoreMultiplier}\n          guesses={guesses}\n          currentCombo={currentCombo}\n          totalCombos={totalCombos}\n\n        />\n      )}\n      {showWinningScreen && <GameRecap stats={recapStats()} playAgain={playGame} /> }\n      <audio ref={matchSound} src={MatchSound} />\n    </div>\n  );\n};\n\nexport default GameWrapper;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport GameWrapper from '../GameWrapper';\n\nimport './App.sass';\n\nconst App = () => (\n  <div className=\"container\">\n    <GameWrapper />\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}